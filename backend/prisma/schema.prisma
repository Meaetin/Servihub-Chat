//  ───────────────────────────────────────────────────────────────
//  prisma/schema.prisma
//  Postgres 13+
//  ───────────────────────────────────────────────────────────────

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ─── ENUMS ──────────────────────────────────────────────────────
//

enum Role {
  CUSTOMER
  AGENT
}

enum ContentType {
  TEXT   // plain text or markdown
  IMAGE  // png / jpeg / webp
  FILE   // pdf, docx, etc.
}

//
// ─── MODELS ─────────────────────────────────────────────────────
//

// All human actors (customers & business staff)
// You MAY split this into separate tables later; for the assessment
// a single table keeps the data-model tight.
model User {
  id        String      @id @default(uuid(7)) @db.Uuid
  email     String?     @unique
  name      String?
  role      Role
  password  String

  // Relations
  conversationsAsCustomer Conversation[] @relation("CustomerConversations")
  conversationsAsBusiness Conversation[] @relation("BusinessConversations")
  messages                Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// One-to-one chat room
model Conversation {
  id          String   @id @default(uuid(7)) @db.Uuid

  // Relations
  customerId  String   @db.Uuid
  customer    User     @relation("CustomerConversations", fields: [customerId], references: [id])

  businessId  String   @db.Uuid
  business    User     @relation("BusinessConversations", fields: [businessId], references: [id])

  messages    Message[]

  createdAt   DateTime @default(now())

  @@index([customerId, createdAt])
  @@index([businessId, createdAt])
}

// Individual message
model Message {
  id             String      @id @default(uuid(7)) @db.Uuid
  conversationId String      @db.Uuid
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  // Sender
  senderId String @db.Uuid
  sender   User        @relation(fields: [senderId], references: [id])
  senderRole Role

  // Payload
  contentType ContentType
  body        String          // for TEXT → message; for FILE/IMAGE → URL

  createdAt   DateTime @default(now())

  @@index([conversationId, createdAt])
  @@index([senderId, createdAt])
}

//╭────────────────────────────────────────────────────────
//│  OPTIONAL — "Like / reaction" table (easy extension)
//╰────────────────────────────────────────────────────────
//model Reaction {
//  message     Message  @relation(fields: [messageId], references: [id])
//  messageId   BigInt
//
//  user        User     @relation(fields: [userId], references: [id])
//  userId      BigInt
//
//  emoji       String   // 👍, ❤️, 😂 …
//
//  @@id([messageId, userId, emoji])  // composite PK avoids duplicates
//}
